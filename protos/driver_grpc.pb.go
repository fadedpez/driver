// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package driverapialpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverAPIClient is the client API for DriverAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverAPIClient interface {
	CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*CreateDriverResponse, error)
}

type driverAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverAPIClient(cc grpc.ClientConnInterface) DriverAPIClient {
	return &driverAPIClient{cc}
}

func (c *driverAPIClient) CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*CreateDriverResponse, error) {
	out := new(CreateDriverResponse)
	err := c.cc.Invoke(ctx, "/DriverAPI/CreateDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverAPIServer is the server API for DriverAPI service.
// All implementations must embed UnimplementedDriverAPIServer
// for forward compatibility
type DriverAPIServer interface {
	CreateDriver(context.Context, *CreateDriverRequest) (*CreateDriverResponse, error)
}

// UnimplementedDriverAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDriverAPIServer struct {
}

func (UnimplementedDriverAPIServer) CreateDriver(context.Context, *CreateDriverRequest) (*CreateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDriver not implemented")
}
func (UnimplementedDriverAPIServer) mustEmbedUnimplementedDriverAPIServer() {}

// UnsafeDriverAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverAPIServer will
// result in compilation errors.
type UnsafeDriverAPIServer interface {
	mustEmbedUnimplementedDriverAPIServer()
}

func RegisterDriverAPIServer(s grpc.ServiceRegistrar, srv DriverAPIServer) {
	s.RegisterService(&DriverAPI_ServiceDesc, srv)
}

func _DriverAPI_CreateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverAPIServer).CreateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverAPI/CreateDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverAPIServer).CreateDriver(ctx, req.(*CreateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverAPI_ServiceDesc is the grpc.ServiceDesc for DriverAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DriverAPI",
	HandlerType: (*DriverAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDriver",
			Handler:    _DriverAPI_CreateDriver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
